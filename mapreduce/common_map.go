package mapreduce

import (
	"encoding/json"
	"hash/fnv"
	"io/ioutil"
	"log"
	"os"
)

func doMap(
	jobName string, // the name of the MapReduce job
	mapTask int, // which map task this is
	inFile string,
	nReduce int, // the number of reduce task that will be run ("R" in the paper)
	mapF func(filename string, contents string) []KeyValue,
) {

	// doMap manages one map task: it should read one of the input files
	// (inFile), call the user-defined map function (mapF) for that file's
	// contents, and partition mapF's output into nReduce intermediate files.

	// There is one intermediate file per reduce task. The file name
	// includes both the map task number and the reduce task number. Use
	// the filename generated by reduceName(jobName, mapTask, r)
	// as the intermediate file for reduce task r. Call ihash() (see below) on each key, mod nReduce, to pick r for a key/value pair.

	// mapF() is the map function provided by the application. The first
	// argument should be the input file name, though the map function
	// typically ignores it. The second argument should be the entire
	// input file contents. mapF() returns a slice containing the
	// key/value pairs for reduce; see common.go for the definition of
	// KeyValue.

	// Look at Go's ioutil and os packages for functions to read
	// and write files.

	// Coming up with a scheme for how to format the key/value pairs on
	// disk can be tricky, especially when taking into account that both
	// keys and values could contain newlines, quotes, and any other
	// character you can think of.

	// One format often used for serializing data to a byte stream that the
	// other end can correctly reconstruct is JSON. You are not required to
	// use JSON, but as the output of the reduce tasks *must* be JSON,
	// familiarizing yourself with it here may prove useful. You can write
	// out a data structure as a JSON string to a file using the commented
	// code below. The corresponding decoding functions can be found in
	// common_reduce.go.

	//   enc := json.NewEncoder(file)
	//   for _, kv := ... {
	//     err := enc.Encode(&kv)

	// Remember to close the file after you have written all the values!

	// 读取 inFile 文件
	data, err := ioutil.ReadFile(inFile)
	if err != nil {
		log.Fatal(err)
	}

	// 利用 mapF 函数处理 inFile 文件内容，得到 kvs
	kvs := mapF(inFile, string(data))

	// 把 kvs 按照 R 任务的需求，划分成 nReduce 份
	for i := 0; i < nReduce; i++ {
		// Reduce 任务 i ，创建文件
		filename := reduceName(jobName, mapTask, i)
		file, err := os.Create(filename)
		if err != nil {
			log.Fatal(err)
		}

		// 把 file 作为 json 流式编码器的输出目的地
		enc := json.NewEncoder(file)

		for _, kv := range kvs {
			if ihash(kv.Key)%nReduce != i {
				// 根据题意，
				// 删除掉不需要 Reduce 任务 i 处理的 kv
				continue
			}

			// 对 kv 进行编码后，发送到 file
			err := enc.Encode(&kv)
			if err != nil {
				log.Fatal(err)
			}
		}

		// Map 任务 m 为 Reduce 任务 i 准备处理的内容
		// 已经全部收集完毕，所以，可以关闭 file 了
		file.Close()
	}
}

func ihash(s string) int {
	h := fnv.New32a()
	h.Write([]byte(s))
	return int(h.Sum32() & 0x7fffffff)
}
